Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMA
    ELSE
    EXCLAMATION
    IF
    SINGLEQUOTE
    THEN
    WHILE

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS term
Rule 2     expression -> expression MINUS term
Rule 3     expression -> term
Rule 4     expression -> statement
Rule 5     term -> term TIMES factor
Rule 6     term -> term DIVIDE factor
Rule 7     term -> factor
Rule 8     factor -> NUMBER
Rule 9     factor -> LPAREN expression RPAREN
Rule 10    statement -> WRITELN LPAREN STRING RPAREN SEMICOLON statement
Rule 11    statement -> PROGRAM STRING SEMICOLON statement
Rule 12    statement -> BEGIN statement
Rule 13    statement -> END FULLSTOP

Terminals, with rules where they appear

BEGIN                : 12
COMMA                : 
DIVIDE               : 6
ELSE                 : 
END                  : 13
EXCLAMATION          : 
FULLSTOP             : 13
IF                   : 
LPAREN               : 9 10
MINUS                : 2
NUMBER               : 8
PLUS                 : 1
PROGRAM              : 11
RPAREN               : 9 10
SEMICOLON            : 10 11
SINGLEQUOTE          : 
STRING               : 10 11
THEN                 : 
TIMES                : 5
WHILE                : 
WRITELN              : 10
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 9 0
factor               : 5 6 7
statement            : 4 10 11 12
term                 : 1 2 3 5 6

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (4) expression -> . statement
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (7) term -> . factor
    (10) statement -> . WRITELN LPAREN STRING RPAREN SEMICOLON statement
    (11) statement -> . PROGRAM STRING SEMICOLON statement
    (12) statement -> . BEGIN statement
    (13) statement -> . END FULLSTOP
    (8) factor -> . NUMBER
    (9) factor -> . LPAREN expression RPAREN

    WRITELN         shift and go to state 5
    PROGRAM         shift and go to state 7
    BEGIN           shift and go to state 8
    END             shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 6

    expression                     shift and go to state 1
    term                           shift and go to state 2
    statement                      shift and go to state 3
    factor                         shift and go to state 4

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 2

    (3) expression -> term .
    (5) term -> term . TIMES factor
    (6) term -> term . DIVIDE factor

    PLUS            reduce using rule 3 (expression -> term .)
    MINUS           reduce using rule 3 (expression -> term .)
    $end            reduce using rule 3 (expression -> term .)
    RPAREN          reduce using rule 3 (expression -> term .)
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14


state 3

    (4) expression -> statement .

    PLUS            reduce using rule 4 (expression -> statement .)
    MINUS           reduce using rule 4 (expression -> statement .)
    $end            reduce using rule 4 (expression -> statement .)
    RPAREN          reduce using rule 4 (expression -> statement .)


state 4

    (7) term -> factor .

    TIMES           reduce using rule 7 (term -> factor .)
    DIVIDE          reduce using rule 7 (term -> factor .)
    PLUS            reduce using rule 7 (term -> factor .)
    MINUS           reduce using rule 7 (term -> factor .)
    $end            reduce using rule 7 (term -> factor .)
    RPAREN          reduce using rule 7 (term -> factor .)


state 5

    (10) statement -> WRITELN . LPAREN STRING RPAREN SEMICOLON statement

    LPAREN          shift and go to state 15


state 6

    (9) factor -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (4) expression -> . statement
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (7) term -> . factor
    (10) statement -> . WRITELN LPAREN STRING RPAREN SEMICOLON statement
    (11) statement -> . PROGRAM STRING SEMICOLON statement
    (12) statement -> . BEGIN statement
    (13) statement -> . END FULLSTOP
    (8) factor -> . NUMBER
    (9) factor -> . LPAREN expression RPAREN

    WRITELN         shift and go to state 5
    PROGRAM         shift and go to state 7
    BEGIN           shift and go to state 8
    END             shift and go to state 9
    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 6

    expression                     shift and go to state 16
    term                           shift and go to state 2
    statement                      shift and go to state 3
    factor                         shift and go to state 4

state 7

    (11) statement -> PROGRAM . STRING SEMICOLON statement

    STRING          shift and go to state 17


state 8

    (12) statement -> BEGIN . statement
    (10) statement -> . WRITELN LPAREN STRING RPAREN SEMICOLON statement
    (11) statement -> . PROGRAM STRING SEMICOLON statement
    (12) statement -> . BEGIN statement
    (13) statement -> . END FULLSTOP

    WRITELN         shift and go to state 5
    PROGRAM         shift and go to state 7
    BEGIN           shift and go to state 8
    END             shift and go to state 9

    statement                      shift and go to state 18

state 9

    (13) statement -> END . FULLSTOP

    FULLSTOP        shift and go to state 19


state 10

    (8) factor -> NUMBER .

    TIMES           reduce using rule 8 (factor -> NUMBER .)
    DIVIDE          reduce using rule 8 (factor -> NUMBER .)
    PLUS            reduce using rule 8 (factor -> NUMBER .)
    MINUS           reduce using rule 8 (factor -> NUMBER .)
    $end            reduce using rule 8 (factor -> NUMBER .)
    RPAREN          reduce using rule 8 (factor -> NUMBER .)


state 11

    (1) expression -> expression PLUS . term
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (7) term -> . factor
    (8) factor -> . NUMBER
    (9) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 6

    term                           shift and go to state 20
    factor                         shift and go to state 4

state 12

    (2) expression -> expression MINUS . term
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (7) term -> . factor
    (8) factor -> . NUMBER
    (9) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 6

    term                           shift and go to state 21
    factor                         shift and go to state 4

state 13

    (5) term -> term TIMES . factor
    (8) factor -> . NUMBER
    (9) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 6

    factor                         shift and go to state 22

state 14

    (6) term -> term DIVIDE . factor
    (8) factor -> . NUMBER
    (9) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 10
    LPAREN          shift and go to state 6

    factor                         shift and go to state 23

state 15

    (10) statement -> WRITELN LPAREN . STRING RPAREN SEMICOLON statement

    STRING          shift and go to state 24


state 16

    (9) factor -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    RPAREN          shift and go to state 25
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12


state 17

    (11) statement -> PROGRAM STRING . SEMICOLON statement

    SEMICOLON       shift and go to state 26


state 18

    (12) statement -> BEGIN statement .

    PLUS            reduce using rule 12 (statement -> BEGIN statement .)
    MINUS           reduce using rule 12 (statement -> BEGIN statement .)
    $end            reduce using rule 12 (statement -> BEGIN statement .)
    RPAREN          reduce using rule 12 (statement -> BEGIN statement .)


state 19

    (13) statement -> END FULLSTOP .

    PLUS            reduce using rule 13 (statement -> END FULLSTOP .)
    MINUS           reduce using rule 13 (statement -> END FULLSTOP .)
    $end            reduce using rule 13 (statement -> END FULLSTOP .)
    RPAREN          reduce using rule 13 (statement -> END FULLSTOP .)


state 20

    (1) expression -> expression PLUS term .
    (5) term -> term . TIMES factor
    (6) term -> term . DIVIDE factor

    PLUS            reduce using rule 1 (expression -> expression PLUS term .)
    MINUS           reduce using rule 1 (expression -> expression PLUS term .)
    $end            reduce using rule 1 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS term .)
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14


state 21

    (2) expression -> expression MINUS term .
    (5) term -> term . TIMES factor
    (6) term -> term . DIVIDE factor

    PLUS            reduce using rule 2 (expression -> expression MINUS term .)
    MINUS           reduce using rule 2 (expression -> expression MINUS term .)
    $end            reduce using rule 2 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS term .)
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14


state 22

    (5) term -> term TIMES factor .

    TIMES           reduce using rule 5 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 5 (term -> term TIMES factor .)
    PLUS            reduce using rule 5 (term -> term TIMES factor .)
    MINUS           reduce using rule 5 (term -> term TIMES factor .)
    $end            reduce using rule 5 (term -> term TIMES factor .)
    RPAREN          reduce using rule 5 (term -> term TIMES factor .)


state 23

    (6) term -> term DIVIDE factor .

    TIMES           reduce using rule 6 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 6 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 6 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 6 (term -> term DIVIDE factor .)
    $end            reduce using rule 6 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 6 (term -> term DIVIDE factor .)


state 24

    (10) statement -> WRITELN LPAREN STRING . RPAREN SEMICOLON statement

    RPAREN          shift and go to state 27


state 25

    (9) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 9 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 9 (factor -> LPAREN expression RPAREN .)


state 26

    (11) statement -> PROGRAM STRING SEMICOLON . statement
    (10) statement -> . WRITELN LPAREN STRING RPAREN SEMICOLON statement
    (11) statement -> . PROGRAM STRING SEMICOLON statement
    (12) statement -> . BEGIN statement
    (13) statement -> . END FULLSTOP

    WRITELN         shift and go to state 5
    PROGRAM         shift and go to state 7
    BEGIN           shift and go to state 8
    END             shift and go to state 9

    statement                      shift and go to state 28

state 27

    (10) statement -> WRITELN LPAREN STRING RPAREN . SEMICOLON statement

    SEMICOLON       shift and go to state 29


state 28

    (11) statement -> PROGRAM STRING SEMICOLON statement .

    PLUS            reduce using rule 11 (statement -> PROGRAM STRING SEMICOLON statement .)
    MINUS           reduce using rule 11 (statement -> PROGRAM STRING SEMICOLON statement .)
    $end            reduce using rule 11 (statement -> PROGRAM STRING SEMICOLON statement .)
    RPAREN          reduce using rule 11 (statement -> PROGRAM STRING SEMICOLON statement .)


state 29

    (10) statement -> WRITELN LPAREN STRING RPAREN SEMICOLON . statement
    (10) statement -> . WRITELN LPAREN STRING RPAREN SEMICOLON statement
    (11) statement -> . PROGRAM STRING SEMICOLON statement
    (12) statement -> . BEGIN statement
    (13) statement -> . END FULLSTOP

    WRITELN         shift and go to state 5
    PROGRAM         shift and go to state 7
    BEGIN           shift and go to state 8
    END             shift and go to state 9

    statement                      shift and go to state 30

state 30

    (10) statement -> WRITELN LPAREN STRING RPAREN SEMICOLON statement .

    PLUS            reduce using rule 10 (statement -> WRITELN LPAREN STRING RPAREN SEMICOLON statement .)
    MINUS           reduce using rule 10 (statement -> WRITELN LPAREN STRING RPAREN SEMICOLON statement .)
    $end            reduce using rule 10 (statement -> WRITELN LPAREN STRING RPAREN SEMICOLON statement .)
    RPAREN          reduce using rule 10 (statement -> WRITELN LPAREN STRING RPAREN SEMICOLON statement .)

